var voxelNormal = new Int8Array(256 * 256 * 256 * 3);
var byteBuffer = new ArrayBuffer(256 * 256 * 256);
var counts = new Uint8Array(byteBuffer);


function generateGeoForSegment(segId, pixelToSegId) {
  var start = window.performance.now();

  var partCount = 0;

  voxelNormal = new Int8Array(256 * 256 * 256 * 3);

  // var voxels = [8421504, 8421504+1, 8421504+1+256, 8421504+1+256+256*256];

  for (var i = 256 * 256 * 256 - 1; i >= 0; --i) {
    if (pixelToSegId[i] === segId) {//voxels.indexOf(i) !== -1) { // pixelToSegId[i] === segId) {
      // var z = Math.floor(i / (256 * 256));
      // var y = Math.floor((i - z * 256 * 256) / 256);
      // var x = i % 256;

      // z += 0.5;
      // y += 0.5;
      // x += 0.5;

      // particleGeo.vertices[partCount].set(x / 256, y / 256, z / 256);

      // partCount++;

      var close = 10;//10;
      var med = 7;//7; (1 / sqrt(2))
      var far = 6; // (1 / sqrt(3))
      // var morefar = 0;
      // var veryFar = 0;

      var xOff = 1;
      var yOff = 256;
      var zOff = 256 * 256;

      // this is faster
      voxelNormal[(i + xOff) * 3] += close;
      voxelNormal[(i - xOff) * 3] -= close;
      voxelNormal[(i + yOff) * 3 + 1] += close;
      voxelNormal[(i - yOff) * 3 + 1] -= close;
      voxelNormal[(i + zOff) * 3 + 2] += close;
      voxelNormal[(i - zOff) * 3 + 2] -= close;

      // voxelNormal[(i + 2) * 3] += morefar;
      // voxelNormal[(i - 2) * 3] -= morefar;
      // voxelNormal[(i + 512) * 3 + 1] += morefar;
      // voxelNormal[(i - 512) * 3 + 1] -= morefar;
      // voxelNormal[(i + (256 * 256) * 2) * 3 + 2] += morefar;
      // voxelNormal[(i - (256 * 256) * 2) * 3 + 2] -= morefar;

      // voxelNormal[(i + 3) * 3] += veryFar;
      // voxelNormal[(i - 3) * 3] -= veryFar;
      // voxelNormal[(i + 768) * 3 + 1] += veryFar;
      // voxelNormal[(i - 768) * 3 + 1] -= veryFar;
      // voxelNormal[(i + (256 * 256) * 3) * 3 + 2] += veryFar;
      // voxelNormal[(i - (256 * 256) * 3) * 3 + 2] -= veryFar;

      // right down (+ +)
      voxelNormal[(i + xOff + yOff)*3] += med; 
      voxelNormal[(i + xOff + yOff)*3+1] += med;

      // right down forward (+ + +)
      voxelNormal[(i + xOff + yOff + zOff)*3] += far; 
      voxelNormal[(i + xOff + yOff + zOff)*3+1] += far;
      voxelNormal[(i + xOff + yOff + zOff)*3+2] += far;

      // right down back (+ + -)
      voxelNormal[(i + xOff + yOff - zOff)*3] += far; 
      voxelNormal[(i + xOff + yOff - zOff)*3+1] += far;
      voxelNormal[(i + xOff + yOff - zOff)*3+2] -= far;

      // left down (- +)
      voxelNormal[(i - xOff + yOff)*3] -= med; 
      voxelNormal[(i - xOff + yOff)*3+1] += med;

      // left down forward (- + +)
      voxelNormal[(i - xOff + yOff + zOff)*3] -= far; 
      voxelNormal[(i - xOff + yOff + zOff)*3+1] += far;
      voxelNormal[(i - xOff + yOff + zOff)*3+2] += far;

      // left down back (- + -)
      voxelNormal[(i - xOff + yOff - zOff)*3] -= far; 
      voxelNormal[(i - xOff + yOff - zOff)*3+1] += far;
      voxelNormal[(i - xOff + yOff - zOff)*3+2] -= far;

      // left up (- -)
      voxelNormal[(i - xOff - yOff)*3] -= med; 
      voxelNormal[(i - xOff - yOff)*3+1] -= med;

      // left up forward (- - +)
      voxelNormal[(i - xOff - yOff + zOff)*3] -= far; 
      voxelNormal[(i - xOff - yOff + zOff)*3+1] -= far;
      voxelNormal[(i - xOff - yOff + zOff)*3+2] += far;

      // left up back (- - -)
      voxelNormal[(i - xOff - yOff - zOff)*3] -= far; 
      voxelNormal[(i - xOff - yOff - zOff)*3+1] -= far;
      voxelNormal[(i - xOff - yOff - zOff)*3+2] -= far;

      // right up (+ -)
      voxelNormal[(i + xOff - yOff)*3] += med; 
      voxelNormal[(i + xOff - yOff)*3+1] -= med;

      // right up forward (+ - +)
      voxelNormal[(i + xOff - yOff + zOff)*3] += far; 
      voxelNormal[(i + xOff - yOff + zOff)*3+1] -= far;
      voxelNormal[(i + xOff - yOff + zOff)*3+2] += far;

      // right up back (+ - -)
      voxelNormal[(i + xOff - yOff - zOff)*3] += far; 
      voxelNormal[(i + xOff - yOff - zOff)*3+1] -= far;
      voxelNormal[(i + xOff - yOff - zOff)*3+2] -= far;

      counts[i                      ] |= 1;   // 0
      counts[i - 1                  ] |= 2;   // 1
      counts[i -     256            ] |= 16;  // 4
      counts[i - 1 - 256            ] |= 32;  // 5
      counts[i -           256 * 256] |= 8;   // 3
      counts[i - 1 -       256 * 256] |= 4;   // 2
      counts[i -     256 - 256 * 256] |= 128; // 7
      counts[i - 1 - 256 - 256 * 256] |= 64;  // 6
    }
  }

  // particleGeo.verticesNeedUpdate = true;

  var triCount = 0;
  
  for (var i = 256 * 256 * 256 - 1; i >= 0; --i) {
    triCount += triCountTable[counts[i]];
  }

  var vertBuffer = new Float32Array(12*3);
  var normBuffer = new Float32Array(12*3)


  var meshVertices = new Float32Array(triCount * 3 * 3);

  // var meshPotentialNormals = new Float32Array(256 * 256 * 256 * 3 * 3)

  var meshNormals = new Float32Array(triCount * 3 * 3);


  var normalMap = {};

  var curTriCount = 0;

  var dbg = 0;

  for (var i = 256 * 256 * 256 - 1; i >= 0; --i) {
    var cubeIndex = counts[i];
    counts[i] = 0;
    
    var indvTriCount = triCountTable[cubeIndex];

    if (indvTriCount !== 0) {

      var z = Math.floor(i / (256 * 256));
      var y = Math.floor((i - z * 256 * 256) / 256);
      var x = i % 256;

      // var wireframe = new THREE.BoxHelper(voxelShape);
      // wireframe.position.set((x + 1) / 256, (y + 1) / 256, (z + 1) / 256);
      // wireframe.material.color = new THREE.Color('white');
      // cubeContents.add(wireframe);

      z += 0.5;
      y += 0.5;
      x += 0.5;

      var no = i*3;

      var n0x = voxelNormal[no]; var n0y = voxelNormal[no+1]; var n0z = voxelNormal[no+2];
      var n1x = voxelNormal[no+(1)*3]; var n1y = voxelNormal[no+(1)*3+1]; var n1z = voxelNormal[no+(1)*3+2];
      var n2x = voxelNormal[no+(256*256+1)*3]; var n2y = voxelNormal[no+(256*256+1)*3+1]; var n2z = voxelNormal[no+(256*256+1)*3+2];
      var n3x = voxelNormal[no+(256*256)*3]; var n3y = voxelNormal[no+(256*256)*3+1]; var n3z = voxelNormal[no+(256*256)*3+2];
      var n4x = voxelNormal[no+(256)*3]; var n4y = voxelNormal[no+(256)*3+1]; var n4z = voxelNormal[no+(256)*3+2];
      var n5x = voxelNormal[no+(256+1)*3]; var n5y = voxelNormal[no+(256+1)*3+1]; var n5z = voxelNormal[no+(256+1)*3+2];
      var n6x = voxelNormal[no+(256*256+256+1)*3]; var n6y = voxelNormal[no+(256*256+256+1)*3+1]; var n6z = voxelNormal[no+(256*256+256+1)*3+2];
      var n7x = voxelNormal[no+(256*256+256)*3]; var n7y = voxelNormal[no+(256*256+256)*3+1]; var n7z = voxelNormal[no+(256*256+256)*3+2];


      // 0 and 1
      vertBuffer[0] = x + 0.5;
      vertBuffer[1] = y;
      vertBuffer[2] = z;

      normBuffer[0] = n0x + n1x;
      normBuffer[1] = n0y + n1y;
      normBuffer[2] = n0z + n1z;

      // 1 and 2
      vertBuffer[3] = x + 1;
      vertBuffer[4] = y;
      vertBuffer[5] = z + 0.5;

      normBuffer[3] = n1x + n2x;
      normBuffer[4] = n1y + n2y;
      normBuffer[5] = n1z + n2z;

      // 2 and 3
      vertBuffer[6] = x + 0.5;
      vertBuffer[7] = y;
      vertBuffer[8] = z + 1;

      normBuffer[6] = n2x + n3x;
      normBuffer[7] = n2y + n3y;
      normBuffer[8] = n2z + n3z;

      // 3 and 0
      vertBuffer[9]  = x;
      vertBuffer[10] = y;
      vertBuffer[11] = z + 0.5;

      normBuffer[9] = n0x + n3x;
      normBuffer[10] = n0y + n3y;
      normBuffer[11] = n0z + n3z;

      // 4 and 5
      vertBuffer[12] = x + 0.5;
      vertBuffer[13] = y + 1;
      vertBuffer[14] = z;

      normBuffer[12] = n4x + n5x;
      normBuffer[13] = n4y + n5y;
      normBuffer[14] = n4z + n5z;

      // 5 and 6
      vertBuffer[15] = x + 1;
      vertBuffer[16] = y + 1;
      vertBuffer[17] = z + 0.5;

      normBuffer[15] = n5x + n6x;
      normBuffer[16] = n5y + n6y;
      normBuffer[17] = n5z + n6z;

      // 6 and 7
      vertBuffer[18] = x + 0.5;
      vertBuffer[19] = y + 1;
      vertBuffer[20] = z + 1;

      normBuffer[18] = n6x + n7x;
      normBuffer[19] = n6y + n7y;
      normBuffer[20] = n6z + n7z;

      // 7 and 4
      vertBuffer[21] = x;
      vertBuffer[22] = y + 1;
      vertBuffer[23] = z + 0.5;

      normBuffer[21] = n4x + n7x;
      normBuffer[22] = n4y + n7y;
      normBuffer[23] = n4z + n7z;

      // 0 and 4
      vertBuffer[24] = x;
      vertBuffer[25] = y + 0.5;
      vertBuffer[26] = z;

      normBuffer[24] = n0x + n4x;
      normBuffer[25] = n0y + n4y;
      normBuffer[26] = n0z + n4z;

      // 1 and 5
      vertBuffer[27] = x + 1;
      vertBuffer[28] = y + 0.5;
      vertBuffer[29] = z;

      normBuffer[27] = n1x + n5x;
      normBuffer[28] = n1y + n5y;
      normBuffer[29] = n1z + n5z;

      // 2 and 6
      vertBuffer[30] = x + 1;
      vertBuffer[31] = y + 0.5;
      vertBuffer[32] = z + 1;

      normBuffer[30] = n2x + n6x;
      normBuffer[31] = n2y + n6y;
      normBuffer[32] = n2z + n6z;

      // 3 and 7
      vertBuffer[33] = x;
      vertBuffer[34] = y + 0.5;
      vertBuffer[35] = z + 1;

      normBuffer[33] = n3x + n7x;
      normBuffer[34] = n3y + n7y;
      normBuffer[35] = n3z + n7z;



      cubeIndex <<= 4; // mult by 16 (triTable row width)

      var j = cubeIndex;

      for (var m = indvTriCount - 1; m >= 0; --m) {
        var startIdx = curTriCount * 9;
        var vert1 = triTable[j] * 3;
        var vert2 = triTable[j + 1] * 3;
        var vert3 = triTable[j + 2] * 3;

        // console.log('tri', vert1 / 3, vert2 / 3, vert3 / 3);

        j+=3;

        meshVertices[startIdx] = vertBuffer[vert1] / 256;
        meshVertices[startIdx+1] = vertBuffer[vert1+1] / 256;
        meshVertices[startIdx+2] = vertBuffer[vert1+2] / 256;

        meshNormals[startIdx] = normBuffer[vert1];
        meshNormals[startIdx+1] = normBuffer[vert1+1];
        meshNormals[startIdx+2] = normBuffer[vert1+2];

        // drawNormal(meshVertices[startIdx], meshVertices[startIdx+1], meshVertices[startIdx+2], meshNormals[startIdx], meshNormals[startIdx+1], meshNormals[startIdx+2]);

        meshVertices[startIdx+3] = vertBuffer[vert2] / 256;
        meshVertices[startIdx+4] = vertBuffer[vert2+1] / 256;
        meshVertices[startIdx+5] = vertBuffer[vert2+2] / 256;

        meshNormals[startIdx+3] =  normBuffer[vert2];
        meshNormals[startIdx+4] = normBuffer[vert2+1];
        meshNormals[startIdx+5] = normBuffer[vert2+2];

        // drawNormal(meshVertices[startIdx+3], meshVertices[startIdx+4], meshVertices[startIdx+5], meshNormals[startIdx+3], meshNormals[startIdx+4], meshNormals[startIdx+5]);

        meshVertices[startIdx+6] = vertBuffer[vert3] / 256;
        meshVertices[startIdx+7] = vertBuffer[vert3+1] / 256;
        meshVertices[startIdx+8] = vertBuffer[vert3+2] / 256;

        meshNormals[startIdx+6] =  normBuffer[vert3];
        meshNormals[startIdx+7] = normBuffer[vert3+1];
        meshNormals[startIdx+8] = normBuffer[vert3+2];

        // drawNormal(meshVertices[startIdx+6], meshVertices[startIdx+7], meshVertices[startIdx+8], meshNormals[startIdx+6], meshNormals[startIdx+7], meshNormals[startIdx+8]); 
        curTriCount++;
      }

      // console.log('stop');

      // dbg++;

      // if (dbg === 2) {
      //   break;
      // }

      // if (curTriCount > triCount) {
      //   break;
      // }
    }
  }

  var segGeo = new THREE.BufferGeometry();
  segGeo.addAttribute('position', new THREE.BufferAttribute(meshVertices, 3));
  segGeo.addAttribute('normal', new THREE.BufferAttribute(meshNormals, 3));

  segGeo.normalizeNormals();

  var end = window.performance.now();

  console.log('time', end - start);
  console.log('triCount', triCount);

  return segGeo;

  // for (var i = Math.min(triCount * 3 - 1, maxVoxelCount); i > 0; --i) {
  //   particleGeo.vertices[partCount].set(meshVertices[i*3] + meshNormals[i*3] / 512, meshVertices[i*3+1] + meshNormals[i*3+1] / 512, meshVertices[i*3+2] + meshNormals[i*3+2] / 512);
  //   partCount++;
  // }

  // particleGeo.verticesNeedUpdate = true;
}



/////////////////////////////////////
// Marching cubes lookup tables
/////////////////////////////////////

// These tables are straight from Paul Bourke's page:
// http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/
// who in turn got them from Cory Gene Bloyd.

// var edgeTable = new Int32Array( [
// 0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
// 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
// 0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
// 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
// 0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,
// 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
// 0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,
// 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
// 0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,
// 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
// 0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,
// 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
// 0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,
// 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
// 0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,
// 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
// 0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
// 0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
// 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
// 0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
// 0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
// 0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
// 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
// 0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,
// 0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
// 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,
// 0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
// 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,
// 0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
// 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,
// 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
// 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 ] );

var triCountTable = new Uint8Array([
  0,
  1,
  1,
  2,
  1,
  2,
  2,
  3,
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  2,
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  3,
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  3,
  2,
  3,
  3,
  2,
  3,
  4,
  4,
  3,
  3,
  4,
  4,
  3,
  4,
  5,
  5,
  2,
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  3,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  2,
  3,
  3,
  4,
  4,
  5,
  4,
  5,
  3,
  2,
  3,
  4,
  4,
  3,
  4,
  5,
  3,
  2,
  4,
  5,
  5,
  4,
  5,
  2,
  4,
  1,
  1,
  2,
  2,
  3,
  2,
  3,
  3,
  4,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  3,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  2,
  4,
  3,
  4,
  3,
  5,
  2,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  4,
  3,
  4,
  4,
  3,
  4,
  5,
  5,
  4,
  4,
  3,
  5,
  2,
  5,
  4,
  2,
  1,
  2,
  3,
  3,
  4,
  3,
  4,
  4,
  5,
  3,
  4,
  4,
  5,
  2,
  3,
  3,
  2,
  3,
  4,
  4,
  5,
  4,
  5,
  5,
  2,
  4,
  3,
  5,
  4,
  3,
  2,
  4,
  1,
  3,
  4,
  4,
  5,
  4,
  5,
  3,
  4,
  4,
  5,
  5,
  2,
  3,
  4,
  2,
  1,
  2,
  3,
  3,
  2,
  3,
  4,
  2,
  1,
  3,
  2,
  4,
  1,
  2,
  1,
  1,
  0]);

/*
1, -1, 1



*/

var triTable = new Int32Array( [
- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 8, 3, 9, 8, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 2, 10, 0, 2, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 8, 3, 2, 10, 8, 10, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 11, 2, 8, 11, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 9, 0, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 11, 2, 1, 9, 11, 9, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 10, 1, 11, 10, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 10, 1, 0, 8, 10, 8, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 9, 0, 3, 11, 9, 11, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 3, 0, 7, 3, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 1, 9, 4, 7, 1, 7, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 4, 7, 3, 0, 4, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 2, 10, 9, 0, 2, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,
8, 4, 7, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 4, 7, 11, 2, 4, 2, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 0, 1, 8, 4, 7, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, - 1, - 1, - 1, - 1,
3, 10, 1, 3, 11, 10, 7, 8, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, - 1, - 1, - 1, - 1,
4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,
4, 7, 11, 4, 11, 9, 9, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 4, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 5, 4, 1, 5, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 5, 4, 8, 3, 5, 3, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 8, 1, 2, 10, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 2, 10, 5, 4, 2, 4, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, - 1, - 1, - 1, - 1,
9, 5, 4, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 11, 2, 0, 8, 11, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 5, 4, 0, 1, 5, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, - 1, - 1, - 1, - 1,
10, 3, 11, 10, 1, 3, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, - 1, - 1, - 1, - 1,
5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,
5, 4, 8, 5, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 7, 8, 5, 7, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 3, 0, 9, 5, 3, 5, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 7, 8, 0, 1, 7, 1, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 7, 8, 9, 5, 7, 10, 1, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, - 1, - 1, - 1, - 1,
8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, - 1, - 1, - 1, - 1,
2, 10, 5, 2, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 9, 5, 7, 8, 9, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,
2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, - 1, - 1, - 1, - 1,
11, 2, 1, 11, 1, 7, 7, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, - 1, - 1, - 1, - 1,
5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, - 1,
11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, - 1,
11, 10, 5, 7, 11, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 0, 1, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 8, 3, 1, 9, 8, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 6, 5, 2, 6, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 6, 5, 1, 2, 6, 3, 0, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 6, 5, 9, 0, 6, 0, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, - 1, - 1, - 1, - 1,
2, 3, 11, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 0, 8, 11, 2, 0, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, - 1, - 1, - 1, - 1,
6, 3, 11, 6, 5, 3, 5, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,
3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, - 1, - 1, - 1, - 1,
6, 5, 9, 6, 9, 11, 11, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 10, 6, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 3, 0, 4, 7, 3, 6, 5, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 9, 0, 5, 10, 6, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,
6, 1, 2, 6, 5, 1, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, - 1, - 1, - 1, - 1,
8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, - 1, - 1, - 1, - 1,
7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, - 1,
3, 11, 2, 7, 8, 4, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,
0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1,
9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, - 1,
8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,
5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, - 1,
0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, - 1,
6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, - 1, - 1, - 1, - 1,
10, 4, 9, 6, 4, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 10, 6, 4, 9, 10, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 0, 1, 10, 6, 0, 6, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,
1, 4, 9, 1, 2, 4, 2, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, - 1, - 1, - 1, - 1,
0, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 3, 2, 8, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 4, 9, 10, 6, 4, 11, 2, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, - 1, - 1, - 1, - 1,
3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,
6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, - 1,
9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, - 1, - 1, - 1, - 1,
8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, - 1,
3, 11, 6, 3, 6, 0, 0, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 4, 8, 11, 6, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 10, 6, 7, 8, 10, 8, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, - 1, - 1, - 1, - 1,
10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, - 1, - 1, - 1, - 1,
10, 6, 7, 10, 7, 1, 1, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,
2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, - 1,
7, 8, 0, 7, 0, 6, 6, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 3, 2, 6, 7, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,
2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, - 1,
1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, - 1,
11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, - 1, - 1, - 1, - 1,
8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, - 1,
0, 9, 1, 11, 6, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, - 1, - 1, - 1, - 1,
7, 11, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 8, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 9, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 1, 9, 8, 3, 1, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 1, 2, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 3, 0, 8, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 9, 0, 2, 10, 9, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, - 1, - 1, - 1, - 1,
7, 2, 3, 6, 2, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
7, 0, 8, 7, 6, 0, 6, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 7, 6, 2, 3, 7, 0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, - 1, - 1, - 1, - 1,
10, 7, 6, 10, 1, 7, 1, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, - 1, - 1, - 1, - 1,
0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, - 1, - 1, - 1, - 1,
7, 6, 10, 7, 10, 8, 8, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 8, 4, 11, 8, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 6, 11, 3, 0, 6, 0, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 6, 11, 8, 4, 6, 9, 0, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, - 1, - 1, - 1, - 1,
6, 8, 4, 6, 11, 8, 2, 10, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, - 1, - 1, - 1, - 1,
4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, - 1, - 1, - 1, - 1,
10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, - 1,
8, 2, 3, 8, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, - 1, - 1, - 1, - 1,
1, 9, 4, 1, 4, 2, 2, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, - 1, - 1, - 1, - 1,
10, 1, 0, 10, 0, 6, 6, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, - 1,
10, 9, 4, 6, 10, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 5, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 4, 9, 5, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 0, 1, 5, 4, 0, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, - 1, - 1, - 1, - 1,
9, 5, 4, 10, 1, 2, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, - 1, - 1, - 1, - 1,
7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, - 1, - 1, - 1, - 1,
3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, - 1,
7, 2, 3, 7, 6, 2, 5, 4, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, - 1, - 1, - 1, - 1,
3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, - 1, - 1, - 1, - 1,
6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, - 1,
9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, - 1, - 1, - 1, - 1,
1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, - 1,
4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, - 1,
7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, - 1, - 1, - 1, - 1,
6, 9, 5, 6, 11, 9, 11, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, - 1, - 1, - 1, - 1,
0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, - 1, - 1, - 1, - 1,
6, 11, 3, 6, 3, 5, 5, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, - 1, - 1, - 1, - 1,
0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, - 1,
11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, - 1,
6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, - 1, - 1, - 1, - 1,
5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, - 1, - 1, - 1, - 1,
9, 5, 6, 9, 6, 0, 0, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, - 1,
1, 5, 6, 2, 1, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, - 1,
10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, - 1, - 1, - 1, - 1,
0, 3, 8, 5, 6, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 5, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 5, 10, 7, 5, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 5, 10, 11, 7, 5, 8, 3, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 11, 7, 5, 10, 11, 1, 9, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, - 1, - 1, - 1, - 1,
11, 1, 2, 11, 7, 1, 7, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, - 1, - 1, - 1, - 1,
9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, - 1, - 1, - 1, - 1,
7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, - 1,
2, 5, 10, 2, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, - 1, - 1, - 1, - 1,
9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, - 1, - 1, - 1, - 1,
9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, - 1,
1, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 7, 0, 7, 1, 1, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 0, 3, 9, 3, 5, 5, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 8, 7, 5, 9, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 8, 4, 5, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, - 1, - 1, - 1, - 1,
0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, - 1, - 1, - 1, - 1,
10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, - 1,
2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, - 1, - 1, - 1, - 1,
0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, - 1,
0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, - 1,
9, 4, 5, 2, 11, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, - 1, - 1, - 1, - 1,
5, 10, 2, 5, 2, 4, 4, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, - 1,
5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, - 1, - 1, - 1, - 1,
8, 4, 5, 8, 5, 3, 3, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 4, 5, 1, 0, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, - 1, - 1, - 1, - 1,
9, 4, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 11, 7, 4, 9, 11, 9, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, - 1, - 1, - 1, - 1,
1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, - 1, - 1, - 1, - 1,
3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, - 1,
4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, - 1, - 1, - 1, - 1,
9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, - 1,
11, 7, 4, 11, 4, 2, 2, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, - 1, - 1, - 1, - 1,
2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, - 1, - 1, - 1, - 1,
9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, - 1,
3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, - 1,
1, 10, 2, 8, 7, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 1, 4, 1, 7, 7, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, - 1, - 1, - 1, - 1,
4, 0, 3, 7, 4, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
4, 8, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 9, 3, 9, 11, 11, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 1, 10, 0, 10, 8, 8, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 1, 10, 11, 3, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 2, 11, 1, 11, 9, 9, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, - 1, - 1, - 1, - 1,
0, 2, 11, 8, 0, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
3, 2, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 3, 8, 2, 8, 10, 10, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
9, 10, 2, 0, 9, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, - 1, - 1, - 1, - 1,
1, 10, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
1, 3, 8, 9, 1, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 9, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
0, 3, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,
- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1 ] );


// debugging
function drawNormal(x1, y1, z1, x2, y2, z2) {
  var material = new THREE.LineBasicMaterial({
    color: 0xffff00
  });

  var vertPos = new THREE.Vector3( x1, y1, z1 );


  var normal = new THREE.Vector3(x2, y2, z2);

    // console.log('normal', new THREE.Vector3(x1 * 256 - 0.5, y1 * 256 - 0.5, z1 * 256 - 0.5), normal);

  normal.setLength(2/256);


  var geometry = new THREE.Geometry();
  geometry.vertices.push(
    vertPos,
    normal.add(vertPos)
  );

  var line = new THREE.Line(geometry, material);

  cubeContents.add(line);
}