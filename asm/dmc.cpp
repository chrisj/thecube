extern "C" {

#include <stdlib.h>
#include <stdint.h>
#include <math.h>
#include <stdio.h>
#include <time.h>

static const int X_DIM = 256;
static const int Y_DIM = 256;
static const int Z_DIM = 256;

static const int X_OFF = 1;
static const int Y_OFF = X_DIM;
static const int Z_OFF = X_DIM * Y_DIM;

static const int TOTAL_VOXELS = X_DIM * Y_DIM * Z_DIM;

static const uint8_t DM_NORMALS[256*12] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,0,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};
static const int8_t DM_EDGES_PRIMARY[256*3] = {
	-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,-1,-1,-1,0,3,8,0,-1,-1,3,8,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,3,-1,-1,0,8,-1,0,3,-1,8,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,8,-1,-1,0,3,-1,0,8,-1,3,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,3,8,-1,0,-1,-1,0,3,8,-1,-1,-1,
};
static const int8_t DM_EDGES[256*12] = {
	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,1,1,0,-1,-1,-1,-1,0,-1,1,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,0,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,-1,-1,-1,-1,-1,0,-1,-1,0,0,0,1,1,-1,-1,-1,-1,-1,0,-1,1,-1,0,0,-1,-1,-1,-1,-1,0,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,0,-1,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,0,-1,-1,0,0,-1,-1,-1,0,-1,-1,0,0,-1,-1,0,-1,-1,-1,-1,0,0,-1,-1,1,-1,-1,1,1,0,-1,-1,-1,0,-1,0,0,-1,-1,0,-1,0,-1,-1,-1,0,0,-1,1,-1,-1,1,1,-1,0,-1,0,1,1,0,0,-1,-1,0,-1,-1,1,-1,0,-1,0,-1,1,-1,-1,1,1,0,0,-1,-1,-1,0,0,0,-1,-1,0,-1,0,0,-1,-1,-1,0,0,1,-1,-1,1,1,-1,-1,0,0,-1,0,-1,0,-1,-1,0,-1,-1,-1,0,0,0,1,1,2,-1,-1,2,2,0,-1,1,-1,0,0,-1,0,-1,-1,0,-1,0,-1,0,-1,0,-1,0,1,-1,-1,1,1,-1,0,0,0,0,-1,-1,0,-1,-1,0,-1,-1,0,0,0,-1,-1,0,1,-1,-1,1,1,0,0,0,-1,-1,-1,-1,0,-1,-1,0,-1,0,0,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,0,-1,-1,0,1,1,-1,-1,0,1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,0,-1,-1,0,-1,-1,-1,-1,0,0,-1,1,1,-1,-1,-1,1,0,-1,0,1,1,0,2,2,-1,-1,0,2,1,-1,0,-1,0,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,0,0,0,0,-1,-1,0,-1,0,-1,-1,-1,0,0,1,1,-1,-1,-1,1,-1,0,0,-1,0,-1,1,1,-1,-1,0,1,-1,0,0,0,1,1,0,0,-1,-1,-1,-1,-1,1,-1,0,0,-1,0,0,-1,-1,0,-1,-1,0,-1,0,-1,0,1,1,-1,-1,-1,1,0,0,0,0,-1,-1,1,1,-1,-1,0,1,0,0,0,-1,-1,0,0,0,-1,-1,-1,-1,0,0,-1,-1,-1,-1,0,0,-1,-1,0,-1,0,0,-1,-1,-1,-1,-1,0,-1,0,0,0,-1,-1,0,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,0,0,-1,-1,-1,0,-1,0,0,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,0,0,-1,-1,1,-1,1,1,1,0,-1,0,1,1,0,-1,0,-1,0,-1,0,1,-1,0,-1,0,-1,-1,0,-1,0,0,-1,0,-1,-1,-1,0,0,-1,0,-1,0,-1,-1,0,-1,-1,-1,0,0,-1,1,-1,1,1,1,-1,0,0,-1,0,-1,-1,0,-1,0,-1,0,-1,0,0,0,1,1,-1,0,-1,0,0,-1,-1,1,-1,0,0,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,1,-1,1,1,1,0,0,0,0,-1,-1,-1,0,-1,0,-1,0,0,0,0,-1,-1,0,-1,0,-1,0,0,-1,0,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,0,-1,-1,0,-1,1,1,-1,0,-1,1,-1,0,0,-1,-1,-1,1,1,-1,-1,0,1,-1,-1,0,-1,0,-1,1,1,-1,0,0,1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,0,1,1,0,-1,1,1,-1,0,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,0,-1,-1,-1,-1,0,0,-1,0,0,-1,0,0,-1,-1,-1,-1,0,0,-1,1,1,-1,-1,-1,1,0,0,-1,0,-1,-1,1,1,-1,0,-1,1,0,0,0,1,1,-1,2,2,-1,-1,0,2,1,-1,0,0,-1,-1,1,1,-1,0,0,1,0,-1,0,-1,0,-1,0,0,-1,-1,-1,-1,0,0,0,-1,-1,-1,0,0,-1,0,-1,-1,0,0,-1,-1,0,-1,0,0,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,0,-1,0,0,-1,0,-1,-1,-1,-1,0,1,1,0,0,-1,1,-1,0,-1,-1,0,0,1,1,0,-1,-1,1,-1,0,0,-1,-1,1,2,2,1,1,0,2,-1,-1,0,-1,0,0,1,1,0,-1,0,1,-1,-1,0,0,-1,1,0,0,1,1,-1,-1,-1,0,1,1,0,0,1,1,0,-1,-1,-1,-1,0,-1,0,-1,1,0,0,1,1,0,-1,-1,-1,-1,0,0,0,0,0,0,-1,0,-1,-1,-1,-1,0,0,1,2,2,1,1,-1,2,0,0,-1,0,-1,0,1,1,0,-1,-1,1,0,0,0,1,1,2,3,3,2,2,0,3,1,-1,0,0,-1,0,1,1,0,-1,0,1,0,-1,0,-1,0,1,0,0,1,1,-1,-1,0,0,0,-1,-1,0,0,0,0,-1,-1,-1,0,0,-1,-1,0,1,0,0,1,1,0,-1,0,-1,-1,-1,-1,0,0,0,0,-1,0,-1,0,-1,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,0,-1,-1,0,1,-1,1,-1,0,1,1,-1,0,0,-1,-1,0,-1,0,-1,-1,-1,0,-1,-1,0,-1,0,0,-1,0,-1,0,-1,0,-1,-1,0,0,-1,0,-1,0,-1,-1,0,-1,-1,0,1,1,0,1,-1,1,-1,0,1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,-1,0,-1,-1,-1,-1,-1,0,0,1,-1,1,-1,-1,1,1,0,0,-1,0,-1,1,-1,1,-1,0,1,1,0,0,0,1,1,0,-1,0,-1,-1,-1,0,1,-1,0,0,-1,0,-1,0,-1,0,-1,0,0,-1,0,-1,0,0,-1,0,-1,-1,0,-1,0,0,0,-1,-1,0,-1,0,-1,0,0,-1,0,0,-1,-1,0,0,-1,0,-1,-1,-1,-1,0,-1,-1,-1,-1,0,-1,0,-1,0,-1,-1,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,-1,0,-1,-1,0,-1,-1,0,0,-1,0,0,-1,0,0,-1,-1,-1,-1,0,0,0,-1,0,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,0,-1,-1,0,0,-1,-1,-1,0,0,0,0,-1,-1,0,0,0,0,-1,-1,0,0,-1,0,-1,-1,0,-1,0,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,1,1,1,1,1,0,0,-1,0,-1,-1,-1,0,0,-1,0,0,0,0,0,1,1,-1,-1,0,0,0,-1,0,1,-1,0,0,-1,-1,-1,0,0,-1,-1,0,0,-1,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,-1,-1,-1,-1,0,0,-1,0,-1,0,0,-1,-1,0,-1,-1,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,0,-1,-1,0,-1,-1,1,1,0,-1,-1,1,0,0,-1,-1,-1,-1,1,1,-1,0,-1,1,-1,0,-1,0,-1,-1,1,1,0,0,-1,1,-1,0,0,-1,-1,-1,1,1,-1,-1,0,1,0,1,1,0,-1,-1,2,2,0,-1,1,2,0,-1,0,-1,-1,-1,1,1,-1,0,0,1,-1,-1,0,0,-1,-1,1,1,0,0,0,1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,0,-1,0,-1,-1,-1,0,0,0,-1,-1,-1,0,0,1,1,-1,-1,1,1,-1,0,-1,-1,-1,0,0,-1,-1,-1,0,0,0,0,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,0,-1,0,0,-1,-1,-1,-1,0,0,0,-1,0,-1,0,-1,-1,0,-1,-1,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,-1,0,0,-1,-1,0,0,-1,0,-1,-1,-1,-1,0,0,0,-1,-1,1,-1,1,-1,1,0,-1,1,-1,0,-1,0,0,-1,0,-1,-1,0,-1,0,-1,0,0,-1,1,-1,1,-1,1,-1,0,1,0,1,1,0,0,-1,0,-1,-1,-1,1,0,0,-1,0,-1,1,-1,1,-1,1,0,0,1,-1,-1,0,0,0,-1,0,-1,-1,0,0,0,-1,-1,0,0,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,0,0,1,1,1,-1,1,-1,1,0,-1,-1,-1,0,0,-1,0,-1,0,-1,-1,0,-1,-1,-1,0,-1,0,0,-1,0,-1,0,-1,0,-1,0,0,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,0,-1,0,0,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,-1,-1,-1,0,0,1,1,-1,0,-1,1,0,-1,-1,0,1,1,2,2,0,1,-1,2,0,0,-1,-1,0,0,1,1,-1,-1,-1,1,-1,0,-1,0,0,0,1,1,0,-1,-1,1,-1,0,0,-1,1,1,2,2,-1,1,0,2,0,1,1,0,2,2,3,3,0,2,1,3,0,-1,0,-1,0,0,1,1,-1,-1,0,1,-1,-1,0,0,0,0,1,1,0,-1,0,1,-1,-1,0,0,1,1,0,0,-1,1,-1,-1,0,-1,0,-1,1,1,0,0,0,1,-1,-1,0,0,1,1,0,0,1,1,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,0,-1,0,1,1,0,0,-1,1,0,-1,0,0,-1,-1,1,1,0,0,0,1,0,-1,0,-1,-1,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,0,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,-1,0,0,-1,-1,0,-1,0,0,-1,-1,0,-1,0,0,0,-1,-1,-1,0,0,-1,0,-1,-1,0,-1,0,-1,0,-1,0,0,-1,-1,-1,-1,0,-1,0,0,-1,-1,1,1,-1,1,1,0,1,0,1,1,0,-1,0,0,-1,-1,0,1,0,0,-1,0,-1,-1,0,0,-1,0,-1,0,0,-1,-1,0,0,-1,0,0,-1,-1,-1,0,0,-1,-1,0,0,-1,0,0,-1,0,0,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,0,-1,-1,0,0,0,0,-1,0,0,-1,0,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,0,-1,0,0,0,-1,0,0,-1,-1,-1,0,0,-1,-1,0,0,-1,0,-1,-1,0,-1,0,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,0,-1,0,-1,-1,0,0,0,-1,-1,0,-1,1,-1,1,0,-1,1,1,0,0,-1,-1,-1,1,-1,1,-1,0,1,1,-1,0,-1,0,-1,1,-1,1,0,0,1,1,-1,0,0,-1,-1,0,-1,0,-1,-1,-1,0,0,1,1,0,-1,1,-1,1,0,-1,-1,1,0,-1,0,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,0,0,-1,0,-1,0,0,0,-1,0,-1,-1,0,0,-1,0,-1,0,-1,-1,0,-1,0,-1,0,-1,-1,0,-1,0,0,-1,0,-1,0,0,1,1,-1,1,-1,1,-1,0,1,-1,-1,0,0,-1,-1,0,-1,0,0,0,0,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,0,0,-1,-1,-1,0,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,-1,0,0,0,-1,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,-1,-1,1,1,-1,-1,1,0,1,1,-1,0,-1,0,0,0,-1,-1,-1,0,0,0,-1,0,0,-1,0,0,-1,-1,0,-1,-1,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,0,0,-1,0,-1,0,0,-1,-1,0,0,-1,0,-1,-1,0,0,0,0,-1,-1,-1,0,-1,0,-1,-1,0,0,0,0,-1,-1,0,-1,0,-1,0,-1,0,-1,0,0,-1,-1,-1,-1,0,-1,0,0,1,1,1,1,-1,-1,1,0,1,-1,-1,0,0,-1,0,0,-1,-1,-1,0,0,-1,-1,0,-1,0,0,0,-1,-1,0,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,0,-1,-1,0,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,0,-1,-1,0,-1,0,0,0,0,-1,-1,0,1,-1,-1,1,0,1,1,1,0,0,-1,-1,0,-1,-1,0,-1,-1,0,0,-1,0,-1,0,0,-1,-1,0,0,-1,0,0,-1,0,0,-1,0,-1,-1,0,-1,0,-1,0,0,1,1,0,1,-1,-1,1,0,1,-1,1,0,-1,0,-1,0,-1,-1,0,-1,-1,-1,0,-1,-1,0,0,0,-1,-1,0,0,-1,-1,0,-1,-1,0,0,0,-1,-1,0,-1,0,0,-1,0,-1,0,-1,0,-1,-1,0,0,0,0,-1,0,0,0,0,0,-1,-1,0,-1,-1,0,-1,-1,0,0,-1,0,-1,-1,0,0,-1,0,-1,-1,0,-1,0,0,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,0,-1,-1,0,0,0,-1,-1,0,-1,-1,0,0,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,-1,-1,0,-1,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,0,-1,0,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,0,-1,-1,-1,-1,-1,0,-1,0,0,-1,0,-1,-1,-1,-1,-1,0,-1,-1,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,0,-1,-1,-1,-1,0,0,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,0,0,-1,-1,-1,-1,0,-1,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,-1,0,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,-1,-1,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
};
static const float DM_VERTICES[256*4*3] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0,0,0,0,0,0,0,0,0,0.500000,0.250000,0.250000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.833333,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.833333,0.166667,0.833333,0,0,0,0,0,0,0.750000,0.250000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0,0,0,0,0,0,0,0,0,0.250000,0.250000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.166667,0.166667,0.833333,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.250000,0.750000,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.833333,0.166667,0,0,0,0,0,0,0,0,0,0.250000,0.500000,0.250000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.833333,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.250000,0.500000,0.250000,0.833333,0.166667,0.833333,0,0,0,0,0,0,0.750000,0.250000,0.500000,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.166667,0.166667,0.833333,0.166667,0.833333,0.166667,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.250000,0.750000,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.833333,0.166667,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.750000,0.500000,0.250000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.833333,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.833333,0.166667,0.833333,0.833333,0.833333,0.166667,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.250000,0.250000,0.500000,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.750000,0.500000,0.250000,0.166667,0.166667,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.250000,0.750000,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.300000,0.500000,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.750000,0.250000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.833333,0.500000,0.750000,0.250000,0,0,0,0,0,0,0.500000,0.500000,0.300000,0.833333,0.166667,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0.500000,0.750000,0.250000,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0.166667,0.166667,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.500000,0.250000,0.750000,0.500000,0.750000,0.250000,0,0,0,0,0,0,0.642857,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.357143,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.750000,0.750000,0,0,0,0,0,0,0,0,0,0.833333,0.833333,0.833333,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.500000,0.250000,0.250000,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.750000,0.500000,0.750000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.750000,0.500000,0.750000,0,0,0,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.250000,0.250000,0.500000,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.166667,0.166667,0.833333,0.833333,0.833333,0.833333,0,0,0,0.500000,0.300000,0.500000,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.833333,0.166667,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.250000,0.500000,0.250000,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.166667,0.833333,0.166667,0.833333,0.833333,0.833333,0,0,0,0.500000,0.500000,0.300000,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.750000,0.500000,0.750000,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.250000,0.500000,0.250000,0.750000,0.500000,0.750000,0,0,0,0,0,0,0.700000,0.500000,0.500000,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.642857,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0.166667,0.833333,0.166667,0.833333,0.833333,0.833333,0,0,0,0.300000,0.500000,0.500000,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.166667,0.166667,0.833333,0.166667,0.833333,0.166667,0.833333,0.833333,0.833333,0.500000,0.500000,0.500000,0.833333,0.833333,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.700000,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.642857,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0.166667,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.833333,0.500000,0,0,0,0,0,0,0,0,0,0.750000,0.750000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.750000,0.750000,0.500000,0,0,0,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.700000,0.500000,0.500000,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0.750000,0.750000,0.500000,0,0,0,0,0,0,0.250000,0.250000,0.500000,0.750000,0.750000,0.500000,0,0,0,0,0,0,0.700000,0.500000,0.500000,0.166667,0.166667,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.642857,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.357143,0,0,0,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.250000,0.750000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.357143,0.500000,0,0,0,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.250000,0.500000,0.750000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0.500000,0.700000,0.500000,0,0,0,0,0,0,0.500000,0.500000,0.642857,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0.166667,0.166667,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.833333,0,0,0,0,0,0,0,0,0,0.357143,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.833333,0.833333,0,0,0,0,0,0,0,0,0,0.166667,0.833333,0.833333,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.500000,0.250000,0.250000,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.833333,0.166667,0.833333,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.833333,0.166667,0.833333,0.166667,0.833333,0.833333,0,0,0,0.750000,0.250000,0.500000,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.500000,0.300000,0.500000,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.250000,0.500000,0.750000,0,0,0,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.250000,0.500000,0.750000,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.250000,0.750000,0.500000,0,0,0,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.250000,0.750000,0.500000,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.833333,0.250000,0.750000,0.500000,0,0,0,0,0,0,0.300000,0.500000,0.500000,0.833333,0.166667,0.833333,0,0,0,0,0,0,0.750000,0.250000,0.500000,0.250000,0.750000,0.500000,0,0,0,0,0,0,0.500000,0.500000,0.642857,0,0,0,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.300000,0.500000,0.500000,0,0,0,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.357143,0,0,0,0,0,0,0,0,0,0.750000,0.750000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.833333,0.166667,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.833333,0.833333,0.166667,0.166667,0.833333,0.833333,0,0,0,0.750000,0.500000,0.250000,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.300000,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.833333,0.166667,0.833333,0.833333,0.833333,0.166667,0.166667,0.833333,0.833333,0,0,0,0.166667,0.166667,0.166667,0.833333,0.166667,0.833333,0.833333,0.833333,0.166667,0.166667,0.833333,0.833333,0.700000,0.500000,0.500000,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.500000,0.166667,0.833333,0.833333,0,0,0,0,0,0,0.250000,0.500000,0.750000,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.300000,0.500000,0.500000,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.750000,0.500000,0.250000,0.250000,0.500000,0.750000,0,0,0,0,0,0,0.500000,0.642857,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.700000,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.500000,0.500000,0.833333,0.833333,0.166667,0,0,0,0,0,0,0.500000,0.642857,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.833333,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.833333,0.500000,0.700000,0.500000,0,0,0,0,0,0,0.500000,0.500000,0.500000,0.833333,0.166667,0.833333,0,0,0,0,0,0,0.500000,0.500000,0.642857,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.833333,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.357143,0.500000,0,0,0,0,0,0,0,0,0,0.750000,0.500000,0.750000,0,0,0,0,0,0,0,0,0,0.642857,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.833333,0.833333,0,0,0,0,0,0,0,0,0,0.500000,0.750000,0.750000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.500000,0.750000,0.750000,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.500000,0.750000,0.750000,0,0,0,0,0,0,0.500000,0.250000,0.250000,0.500000,0.750000,0.750000,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.500000,0.500000,0.700000,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.357143,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.700000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.500000,0.500000,0.700000,0,0,0,0,0,0,0.642857,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.500000,0.750000,0.250000,0,0,0,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.500000,0.700000,0.500000,0,0,0,0,0,0,0.642857,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.357143,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.357143,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.700000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0.500000,0.500000,0.500000,0,0,0,0,0,0,0.833333,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.750000,0.500000,0.250000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.166667,0,0,0,0,0,0,0,0,0,0.833333,0.833333,0.166667,0,0,0,0,0,0,0,0,0,0.500000,0.700000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.500000,0.700000,0.500000,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.357143,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0.500000,0.500000,0.500000,0,0,0,0,0,0,0.300000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.357143,0,0,0,0,0,0,0,0,0,0.500000,0.357143,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.300000,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.166667,0,0,0,0,0,0,0,0,0,0.250000,0.500000,0.250000,0,0,0,0,0,0,0,0,0,0.166667,0.833333,0.166667,0,0,0,0,0,0,0,0,0,0.500000,0.500000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.250000,0.750000,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.166667,0.500000,0,0,0,0,0,0,0,0,0,0.250000,0.250000,0.500000,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.833333,0,0,0,0,0,0,0,0,0,0.500000,0.300000,0.500000,0,0,0,0,0,0,0,0,0,0.750000,0.250000,0.500000,0,0,0,0,0,0,0,0,0,0.500000,0.166667,0.500000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.833333,0,0,0,0,0,0,0,0,0,0.500000,0.250000,0.250000,0,0,0,0,0,0,0,0,0,0.833333,0.166667,0.166667,0,0,0,0,0,0,0,0,0,0.166667,0.166667,0.166667,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};
static const int8_t DM_VERT_COUNT[256] = {
	0,1,1,1,1,2,1,1,1,1,2,1,1,1,1,1,1,1,2,1,2,2,2,1,2,1,3,1,2,1,2,1,1,2,1,1,2,3,1,1,2,2,2,1,2,2,1,1,1,1,1,1,2,2,1,1,2,1,2,1,2,1,1,1,1,2,2,2,1,2,1,1,2,2,3,2,1,1,1,1,2,2,3,2,2,2,2,1,3,2,4,2,2,1,2,1,1,2,1,1,1,2,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,1,1,1,2,2,2,2,3,2,2,1,1,2,1,1,1,1,1,1,1,2,1,2,2,2,1,1,1,2,1,1,1,1,1,2,3,2,2,3,4,2,2,2,2,2,1,2,2,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,2,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,
};
static const int8_t DM_QUAD_COUNT[256] = {
	0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,0,3,1,2,0,3,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,3,0,2,1,3,0,
};
static const int EDGE_TO_CELLS_OFFS[10*3] = {
	// 0
	-Z_OFF, -Z_OFF-Y_OFF, -Y_OFF,
	-Y_OFF, -Z_OFF-Y_OFF, -Z_OFF,
	
	0,0,0,
	
	// 3
	-X_OFF, -X_OFF-Y_OFF, -Y_OFF,
	-Y_OFF, -X_OFF-Y_OFF, -X_OFF,
	
	0,0,0,
	0,0,0,
	0,0,0,
	
	// 8
	-X_OFF, -Z_OFF-X_OFF, -Z_OFF,
	-Z_OFF, -Z_OFF-X_OFF, -X_OFF,
};
static const int8_t EDGE_TO_CELLS_EDGES[10*3] = {
	// 0
	2, 6, 4,
	4, 6, 2,

	0,0,0,

	// 3
	1, 5, 7,
	7, 5, 1,

	0,0,0,
	0,0,0,
	0,0,0,

	// 8
	9, 10, 11,
	11, 10, 9,
};

static uint8_t counts[TOTAL_VOXELS];
static uint32_t vertIdx[TOTAL_VOXELS]; // TODO, this is worst case, maybe impossible, 4 vertices for every voxel


struct dmc_result {
	uint32_t quadCount;
	uint32_t vertCount;

	float *vertices;
	uint16_t *triangles;
};

dmc_result* dual_marching_cubes(uint16_t* voxelToSegId, int segId) {
	clock_t begin, end;
	double time_spent;
	begin = clock();

	uint32_t quadCount = 0;
	uint32_t vertCount = 0;

	int center = 128 + 128 * Y_OFF + 128 * Z_OFF;

	for (int i = TOTAL_VOXELS - 1; i >= 0; --i) {
		if (voxelToSegId[i] == segId) {
			counts[i                        ] |= 1;
			counts[i - X_OFF                ] |= 2;
			counts[i         - Y_OFF        ] |= 16;
			counts[i - X_OFF - Y_OFF        ] |= 32;
			counts[i                 - Z_OFF] |= 8;
			counts[i - X_OFF         - Z_OFF] |= 4;
			counts[i         - Y_OFF - Z_OFF] |= 128;
			counts[i - X_OFF - Y_OFF - Z_OFF] |= 64;
		}

		vertCount += DM_VERT_COUNT[counts[i]];
		quadCount += DM_QUAD_COUNT[counts[i]];
	}

	printf("QC %d VC %d\n", quadCount, vertCount);

	// allocate verts and quads
	float *vertices;
	vertices = (float*)calloc((vertCount * 3), sizeof(float));

	// float *normals;
	// normals = (float*)calloc((vertCount * 3), sizeof(float));

	uint16_t *triangles;
	triangles = (uint16_t*)calloc((quadCount * 2 * 3), sizeof(uint16_t));

	int curVertCount = 0;
	int curQuadCount = 0;

	int vertsForCube;
	int quadsForCube;

	int cubeIndex;

	int vertOffset;

	int x, y, z;

	int edge;
	int edge2;


	int c2, c3, c4;

	int c1V, c2V, c3V, c4V;

	float rc1VX, rc1VY, rc1VZ;
	float rc2VX, rc2VY, rc2VZ;
	float rc3VX, rc3VY, rc3VZ;
	float rc4VX, rc4VY, rc4VZ;

	float dist1Squared, dist2Squared;

	int startX = 0;
	int startY = 0;
	int startZ = 0;
	int endX = 255;
	int endY = 255;
	int endZ = 255;

	int X_WIN_SIZE = endX - startX + 1;
	int Y_WIN_SIZE = endY - startY + 1;

	int i = startX + startY * X_DIM + startZ * X_DIM * Y_DIM;

	// for (z = startZ; z <= endZ; ++z) {
	// 	for (y = startY; y <= endY; ++y) {
	// 		for (x = startX; x <= endX; ++x) {
				// counts[i - X_OFF - Y_OFF - Z_OFF - 1] = 0; // TODO, this will be out of bounds at 1,1,1
		for (int i = 0; i < TOTAL_VOXELS; ++i) {
				cubeIndex = counts[i];

				if (cubeIndex != 0 && cubeIndex != 255) {
					z = floor(i / Z_OFF);
					y = floor((i - z * Z_OFF) / Y_OFF);
					x = i % Y_OFF;

					vertIdx[i] = curVertCount;

					vertsForCube = DM_VERT_COUNT[cubeIndex];
					for (int j = 0; j < vertsForCube; j++) {
						vertOffset = cubeIndex * 12 + j;

						vertices[curVertCount*3+0] = x + DM_VERTICES[vertOffset];
						vertices[curVertCount*3+1] = y + DM_VERTICES[vertOffset+1];
						vertices[curVertCount*3+2] = z + DM_VERTICES[vertOffset+2];
						curVertCount++;
					}

					quadsForCube = DM_QUAD_COUNT[cubeIndex];

					for (int j = 0; j < quadsForCube; j++) {
						edge = DM_EDGES_PRIMARY[cubeIndex*3+j];
						edge2 = edge + DM_NORMALS[cubeIndex * 12 + edge];

						c2 = i + EDGE_TO_CELLS_OFFS[edge2 * 3 + 0];
						c3 = i + EDGE_TO_CELLS_OFFS[edge2 * 3 + 1];
						c4 = i + EDGE_TO_CELLS_OFFS[edge2 * 3 + 2];

						c1V = vertIdx[i] + DM_EDGES[cubeIndex * 12 + edge];
						c2V = vertIdx[c2] + DM_EDGES[counts[c2] * 12 + EDGE_TO_CELLS_EDGES[edge2 * 3 + 0]];
						c3V = vertIdx[c3] + DM_EDGES[counts[c3] * 12 + EDGE_TO_CELLS_EDGES[edge2 * 3 + 1]];
						c4V = vertIdx[c4] + DM_EDGES[counts[c4] * 12 + EDGE_TO_CELLS_EDGES[edge2 * 3 + 2]];

						// printf("test %d %d %d %d\n", c1V, c2V, c3V, c4V);

						rc1VX = vertices[c1V * 3 + 0];
						rc1VY = vertices[c1V * 3 + 1];
						rc1VZ = vertices[c1V * 3 + 2];
						
						rc2VX = vertices[c2V * 3 + 0];
						rc2VY = vertices[c2V * 3 + 1];
						rc2VZ = vertices[c2V * 3 + 2];
						
						rc3VX = vertices[c3V * 3 + 0];
						rc3VY = vertices[c3V * 3 + 1];
						rc3VZ = vertices[c3V * 3 + 2];
						
						rc4VX = vertices[c4V * 3 + 0];
						rc4VY = vertices[c4V * 3 + 1];
						rc4VZ = vertices[c4V * 3 + 2];

						dist1Squared = pow(rc1VX - rc3VX, 2) + pow(rc1VY - rc3VY, 2) + pow(rc1VZ - rc3VZ, 2);
						dist2Squared = pow(rc2VX - rc4VX, 2) + pow(rc2VY - rc4VY, 2) + pow(rc2VZ - rc4VZ, 2);

						// split along shortest side
						if (dist1Squared < dist2Squared) {
							triangles[curQuadCount*2*3+0] = c2V;
							triangles[curQuadCount*2*3+1] = c1V;
							triangles[curQuadCount*2*3+2] = c3V;

							triangles[curQuadCount*2*3+3] = c3V;
							triangles[curQuadCount*2*3+4] = c1V;
							triangles[curQuadCount*2*3+5] = c4V;
						} else {
							triangles[curQuadCount*2*3+0] = c1V;
							triangles[curQuadCount*2*3+1] = c4V;
							triangles[curQuadCount*2*3+2] = c2V;

							triangles[curQuadCount*2*3+3] = c2V;
							triangles[curQuadCount*2*3+4] = c4V;
							triangles[curQuadCount*2*3+5] = c3V;
						}

						curQuadCount++;

						// calculate normal

					}
				}
		// 		++i;
		// 	}
		// 	i = i - X_WIN_SIZE + Y_OFF;
		// }
		// i = i - Y_WIN_SIZE * Y_OFF + Z_OFF;
	}

	for (int i = TOTAL_VOXELS; i >= 0; --i) {
		counts[i] = 0;
	}

	end = clock();

	time_spent = (double)(end - begin) * 1000 / CLOCKS_PER_SEC;

	printf("time = %fms\n", time_spent);


	dmc_result* ret = (dmc_result*)malloc(sizeof(dmc_result));
	ret->quadCount = quadCount;
	ret->vertCount = vertCount;
	ret->vertices = vertices;
	ret->triangles = triangles;


	return ret;
}


// int main() {
// 	// printf("%f\n", DM_VERTICES[120]);

// 	// read segmentation
// 	uint16_t* voxelToSegId;
// 	voxelToSegId = (uint16_t*)malloc(TOTAL_VOXELS * sizeof(uint16_t));

// 	voxelToSegId[128 + 128 * Y_OFF + 128 * Z_OFF] = 50;

// 	// FILE *readPtr = fopen("segmentation", "rb");
// 	// fread(voxelToSegId, 256 * 256 * 256, sizeof(uint16_t), readPtr);
// 	// fclose(readPtr);
// 	///

// 	dmc_result* test = dual_marching_cubes(voxelToSegId, 50);

// 	printf("testing struct %d\n", test->quadCount);

// 	free(voxelToSegId);

// 	return 0;
// }


}